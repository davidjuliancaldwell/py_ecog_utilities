import numpy as np
import itertools

def generate_bipolar_pair_list(ch_length=8,start_ch=1,distance=10):
    """
    Generate a list of all possible unique bipolar pairs from a list of channel names.

    Parameters
    ----------
    ch_length : int
        Number of channels (default is 8).
    start_ch : int
        Starting channel number (default is 1).
    distance : int
        Distance between anode and cathode channels (default is 10). in mm 

    Returns
    -------
    anode_list : list of strings
        list of anode channel names, represented as integers formatted as string
    cathode_list : list of strings
        list of cathode channel names, represented as integers formatted as string
    distance_list : array of int
        list of distances between anode and cathode channels, depends on distance parameter
    """
    if not isinstance(ch_length, int):
        raise ValueError("input must be an integer representing the number of channels")

    cathode_list = []
    anode_list = []
    distance_list = []

    list_chans = list(range(start_ch,start_ch+ch_length+1))
    combinations_of_2 = np.array(list(itertools.combinations(list_chans, 2)))
    anode_list = list(combinations_of_2[:, 0].astype(str))
    cathode_list = list(combinations_of_2[:, 1].astype(str))
    distance_list = [distance] * np.abs(combinations_of_2[:,0] - combinations_of_2[:,1])

    return cathode_list, anode_list, distance_list

def generate_select_list(anode_list, cathode_list, distance_list = [],distance_int=None,all_chans = False):
    """
    Generate a selection list from the bipolar pair lists.

    Parameters
    ----------
    anode_list : list of strings
        List of anode channel names.
    cathode_list : list of strings
        List of cathode channel names.
    distance_list : list of int, optional
        List of distances between anode and cathode channels.
    distance_int : int, optional
        Distance between anode and cathode channels to select for, if not provided will use all channels to generate string list
    all_chans : bool, optional
        If True, will return all channels in the format 'ch1-ch2' for bipolar referencing.
        If False, will return only the bipolar pairs that have a certain distance.

    Returns
    -------
    select_list : list of tuples
        List of strings formatted to match the bipolar channel names as generated by MNE
        for bipolar referencing following MNE conventions.
    """
    if not (len(cathode_list) == len(anode_list)):
        raise ValueError("Input lists must have the same length")    
    
    # if no distance specified of interest, then does all channels 
    if not distance_int:
        all_chans = True

    if all_chans:
        select_list = [f'{anode}-{cathode}' for anode, cathode in zip(anode_list, cathode_list)]
        return select_list
    else:
        if len(distance_list) == 0:
            raise ValueError("distance_list must be provided if all_chans is False")
        if not isinstance(distance_int, int):
            raise ValueError("distance_int must be an integer representing the distance between channels")
        if not (len(cathode_list) == len(anode_list) == len(distance_list)):
            raise ValueError("Input lists must have the same length")    
        # Filter pairs based on distance
        select_list = []
        for anode, cathode, distance in zip(anode_list, cathode_list, distance_list):
            if distance == distance_int:
                select_list.append(f'{anode}-{cathode}')


    return select_list